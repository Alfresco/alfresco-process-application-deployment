# Default values for alfresco-process-application.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# README documentation generated automatically from this file via https://github.com/norwoodj/helm-docs

# global -- for common values see https://github.com/Activiti/activiti-cloud-common-chart/blob/master/charts/common/README.md
global:
  # global.registryPullSecrets -- Configure pull secrets for all deployments
  registryPullSecrets:
    - quay-registry-secret
  applicationVersion: "1"
  applicationName: "{{ .Release.Name }}"
  keycloak:
    # global.keycloak.host -- Configure Keycloak host template, i.e. "{{ .Release.Namespace }}.{{ .Values.global.gateway.domain }}"
    host: '{{ template "common.gateway-host" . }}'
    # global.keycloak.url -- Set full url to configure external Keycloak, https://keycloak.mydomain.com/auth
    url: ""
    # global.keycloak.realm -- Configure Keycloak realm
    realm: alfresco
    # global.keycloak.resource -- Configure Keycloak resource
    resource: "{{ .Release.Name }}"
    # global.keycloak.clientId -- Configure Activiti Keycloak Client Id
    clientId: activiti-keycloak
    # global.keycloak.clientSecret -- Configure Activiti Keycloak Client Secret. Required if useExistingClientSecret set to false
    clientSecret: ""
    # global.keycloak.clientSecretName -- Configure Keycloak Client Kubernetes Secret Name. Secret will be created if `useExistingClientSecret` set to false
    clientSecretName: activiti-keycloak-client
    # global.keycloak.useExistingClientSecret -- Configure to use existing Keycloak clientId and clientSecret from Kubernetes Secret
    useExistingClientSecret: false
  gateway:
    # global.gateway.host -- Set to configure single host domain name for all services, i.e. "{{ .Release.Namespace }}.{{ template "common.gateway-domain" . }}"
    host: '{{ template "common.gateway-domain" . }}'
    # global.gateway.http -- Set to false enables HTTPS configuration on all urls
    http: false
    # global.gateway.tlsacme -- Set to enable automatic TLS for ingress if https is enabled
    tlsacme: false
    # global.gateway.domain -- Set to configure gateway domain template, i.e. {{ .Release.Namespace }}.1.3.4.5.nip.io
    # $ helm upgrade aae . --install --set global.gateway.domain=1.2.3.4.nip.io
    domain: ""
    # global.gateway.annotations -- Configure global annotations for all service ingresses
    annotations: {}
  acs:
    # global.acs.enabled -- enable support for ACS
    enabled: false
  messaging:
    # global.messaging.broker -- required supported messaging broker, i.e rabbitmq or kafka
    broker: "rabbitmq"
    # global.messaging.partitioned -- enables partitioned messaging in combination with common values of messaging.enabled=true and messaging.role=producer|consumer
    partitioned: false
    # global.messaging.partitionCount -- configures number of partitioned consumers and producers
    partitionCount: 2
    # global.messaging.destinationPrefix -- Set destination separator to use to build full destinations, i.e. <prefix>_destination.
    destinationPrefix: ""
    # global.messaging.destinationSeparator -- Set destination separator to use to build full destinations, i.e. prefix<_>destination.
    destinationSeparator: "_"
    # global.messaging.destinationTransformersEnabled -- Enable destination name transformers to apply conversion to all destination name for producers, consumers and connectors
    destinationTransformersEnabled: false
    # global.messaging.destinationTransformers -- Comma separated list of transformer functions to apply conversion to all destination name for producers, consumers and connectors
    destinationTransformers: toLowerCase,escapeIllegalChars
    # global.messaging.destinationIllegalCharsRegex -- Configure regex expression to use for replacement of illegal characters in the destination names.
    destinationIllegalCharsRegex: "[\\t\\s*#:]"
    # global.messaging.destinationIllegalCharsReplacement -- Configure replacement character for illegal characters in the destination names.
    destinationIllegalCharsReplacement: "-"
    # global.messaging.destinations -- Configure destination properties to apply customization to producers and consumer channel bindings with matching destination key.
    destinations:
      engineEvents:
        name: engineEvents
      signalEvent:
        name: signalEvent
      commandConsumer:
        name: commandConsumer
      asyncExecutorJobs:
        name: asyncExecutorJobs
      messageEvents:
        name: messageEvents
      commandResults:
        name: commandResults
      integrationResult:
        name: integrationResult
      integrationError:
        name: integrationError
  rabbitmq:
    host: "rabbitmq"
    username: guest
    password: guest
    ## global.kafka.extraEnv -- extra environment variables string template for Rabbitmq binder parameters
    extraEnv: ""
  kafka:
    ## global.kafka.brokers -- Multiple brokers can be provided in a comma separated list host[:port], e.g. host1,host2:port
    brokers: "kafka"
    ## global.kafka.extraEnv -- extra environment variables string template for Kafka binder parameters, i.e. to disable Kafka transactions
    extraEnv: |
      - name: ACT_AUDIT_PRODUCER_TRANSACTION_ID_PREFIX
        value: ""
activiti-cloud-query:
  enabled: true
  nameOverride: activiti-cloud-query
  service:
    name: query
  javaOpts:
    xmx: 2048m
    xms: 512m
  postgresql:
    enabled: true
  db:
    # activiti-cloud-query.db.ddlAuto -- set to 'none' temporarily rather than default 'validate' that breaks
    ddlAuto: none
  messaging:
    enabled: true
    role: consumer
  image:
    repository: quay.io/alfresco/alfresco-process-query-service
    tag: 7.14.0-alpha.51
    pullPolicy: Always
  liquibase:
    enabled: true
  ingress:
    path: /{{ .Release.Name }}
    subPaths:
      - /query/?(.*)
      - /audit/?(.*)
      - /notifications/?(.*)
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: "*"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/session-cookie-change-on-failure: "true"
      nginx.ingress.kubernetes.io/session-cookie-name: activiti-cloud-query-session
  readinessProbe:
    path: /actuator/health/readiness
  livenessProbe:
    path: /actuator/health/liveness
  resources:
    limits:
      cpu: "1.5"
      memory: 2048Mi
    requests:
      cpu: 200m
      memory: 512Mi
  extraEnv: |
    - name: SERVER_PORT
      value: "8080"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
    - name: KEYCLOAK_USERESOURCEROLEMAPPINGS
      value: "false"
    - name: ACTIVITI_KEYCLOAK_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: {{ tpl .Values.global.keycloak.clientSecretName $ }}
          key: clientId
    - name: ACTIVITI_KEYCLOAK_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: {{ tpl .Values.global.keycloak.clientSecretName $ }}
          key: clientSecret
    - name: ACTIVITI_CLOUD_APPLICATION_NAME
      value: {{ tpl .Values.global.applicationName $ | quote }}
    - name: GRAPHIQL_GRAPHQL_WS_PATH
      value: '/{{ .Release.Name }}/notifications/ws/graphql'
    - name: GRAPHIQL_GRAPHQL_WEB_PATH
      value: '/{{ .Release.Name }}/notifications/graphql'
  affinity: {}
runtime-bundle:
  enabled: true
  nameOverride: runtime-bundle
  service:
    name: rb
  javaOpts:
    xmx: 2048m
    xms: 512m
  projectName: example-app
  postgresql:
    enabled: true
  messaging:
    enabled: true
    role: producer
  image:
    repository: quay.io/alfresco/alfresco-process-runtime-bundle-service
    tag: 7.14.0-alpha.51
    pullPolicy: Always
  ingress:
    enabled: true
    path: /{{ .Release.Name }}
    subPaths:
      - /rb/?(.*)
      - /preference/?(.*)
      - /form/?(.*)
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: "*"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
  readinessProbe:
    path: /actuator/health/readiness
  livenessProbe:
    path: /actuator/health/liveness
  resources:
    limits:
      cpu: "2"
      memory: 2048Mi
    requests:
      cpu: 200m
      memory: 512Mi
  extraEnv: |
    - name: SERVER_PORT
      value: "8080"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
    - name: ACTIVITI_CLOUD_APPLICATION_NAME
      value: {{ tpl .Values.global.applicationName $ | quote }}
    - name: KEYCLOAK_USERESOURCEROLEMAPPINGS
      value: "true"
    - name: ACTIVITI_KEYCLOAK_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: {{ tpl .Values.global.keycloak.clientSecretName $ }}
          key: clientId
    - name: ACTIVITI_KEYCLOAK_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: {{ tpl .Values.global.keycloak.clientSecretName $ }}
          key: clientSecret
    - name: SPRING_ACTIVITI_PROCESSDEFINITIONLOCATIONPREFIX
      value: 'file:/home/alfresco/.activiti/project-release-volume/{{ .Values.global.applicationVersion }}/processes/'
    - name: PROJECT_MANIFEST_FILE_PATH
      value: 'file:/home/alfresco/.activiti/project-release-volume/{{ .Values.global.applicationVersion }}/{{ .Values.projectName }}.json'
    - name: APPLICATION_VERSION
      value: "{{ .Values.global.applicationVersion }}"
    - name: ACT_RB_SERVICE_URL
      value: '{{ include "common.gateway-url" . }}/{{ .Release.Name }}/rb'
    - name: DMNCONFIGURATION_TABLESDEFINITIONSDIRECTORYPATH
      value: 'file:/home/alfresco/.activiti/project-release-volume/{{ .Values.global.applicationVersion }}/decision-tables/'
    - name: FORMCONFIGURATION_FORMSDEFINITIONSDIRECTORYPATH
      value: 'file:/home/alfresco/.activiti/project-release-volume/{{ .Values.global.applicationVersion }}/forms/'
    - name: CONTENT_SERVICE_ENABLED
      value: "{{ .Values.global.acs.enabled }}"
    - name: "APPLICATION_EMAIL_ENABLED"
      value: "false"
  extraVolumes: |
    - name: {{ .Release.Name }}
      persistentVolumeClaim:
        claimName: {{ .Release.Name }}
  extraVolumeMounts: |
    - name: {{ .Release.Name }}
      mountPath: '/home/alfresco/.activiti/project-release-volume/{{ .Values.global.applicationVersion }}/'
  affinity: {}
activiti-cloud-connector:
  enabled: false
  nameOverride: example-cloud-connector
  image:
    repository: activiti/example-cloud-connector
    tag: 7.10.0-alpha.24
    pullPolicy: Always
  messaging:
    enabled: true
    role: connector
  ingress:
    enabled: true
    path: "/{{ .Release.Name }}/{{ .Values.nameOverride }}"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: "*"
  readinessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/readiness'
  livenessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/liveness'
  extraEnv: |
    - name: SERVER_PORT
      value: "8080"
    - name: SERVER_SERVLET_CONTEXTPATH
      value: "{{ tpl .Values.ingress.path . }}"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
    - name: ACTIVITI_CLOUD_APPLICATION_NAME
      value: {{ tpl .Values.global.applicationName $ | quote }}
  affinity: {}
alfresco-digital-workspace-app:
  enabled: false
  nameOverride: digital-workspace-app
  ingress:
    enabled: true
    path: "/{{ .Release.Name }}/digital-workspace"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
  image:
    repository: quay.io/alfresco/alfresco-digital-workspace-apa
    tag: develop
    pullPolicy: Always
  service:
    name: adw-app
    envType: frontend
  env:
    APP_CONFIG_AUTH_TYPE: "OAUTH"
    APP_CONFIG_BPM_HOST: '{{ include "common.gateway-url" . }}'
    APP_CONFIG_ECM_HOST: '{{ include "common.gateway-url" . }}'
    APP_CONFIG_APPS_DEPLOYED: '[{"name": "{{ .Release.Name }}" }]'
    APP_CONFIG_PROVIDER: "ALL"
    APP_CONFIG_IDENTITY_HOST: '{{ include "common.keycloak-url" . }}/admin/realms/{{ include "common.keycloak-realm" . }}'
alfresco-admin-app:
  enabled: false
  nameOverride: admin-app
  service:
    name: admin-app
    envType: frontend
  ingress:
    enabled: true
    path: "/{{ .Release.Name }}/admin"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
  image:
    repository: quay.io/alfresco/alfresco-admin-app
    tag: develop
    pullPolicy: Always
  env:
    APP_CONFIG_AUTH_TYPE: OAUTH
    APP_CONFIG_BPM_HOST: '{{ include "common.gateway-url" . }}'
    APP_CONFIG_IDENTITY_HOST: '{{ include "common.keycloak-url" . }}/admin/realms/{{ include "common.keycloak-realm" . }}'
    APP_CONFIG_APPS_DEPLOYED: '[{"name": "{{ .Release.Name }}" }]'
  extraEnv: |-
    {{- if not .Values.global.acs.enabled }}
    - name: APP_CONFIG_PROVIDER
      value: BPM
    {{- end }}
postgresql:
  enabled: true
  image:
    tag: 13.3.0
  postgresqlPassword: password
  resources:
    requests:
      cpu: 350m
      memory: 512Mi
  commonAnnotations:
    application: activiti
rabbitmq:
  enabled: true
  fullnameOverride: rabbitmq
  extraPlugins: ""
  livenessProbe:
    timeoutSeconds: 90
  readinessProbe:
    timeoutSeconds: 90
  persistence:
    storageClass:
    accessMode: ReadWriteOnce
  auth:
    username: guest
    password: guest
    erlangCookie: ylY79lOdNUWsJEwAGdVQnhjSazV4QZKO=
  resources:
    requests:
      cpu: 350m
      memory: 512Mi
    limits:
      cpu: "1"
      memory: 2Gi
  replicaCount: 1
  ingress:
    enabled: false
    hostName: "REPLACEME"
    path: /rabbitmq
volumeinit:
  enabled: true
  # volumeinit.image -- REPLACE with your image containing project files
  image:
    repository: alfresco/example-application-project
    tag: latest
    pullPolicy: Always
persistence:
  enabled: true
  storageClassName:
  accessModes:
    - ReadWriteOnce
  baseSize: 1Gi
##
## Kafka chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/kafka/values.yaml
##
kafka:
  fullnameOverride: kafka
  enabled: false
  replicaCount: 1
  offsetsTopicReplicationFactor: 1
  ##
  ## Zookeeper chart configuration
  ##
  ## https://github.com/bitnami/charts/blob/master/bitnami/zookeeper/values.yaml
  ##
  zookeeper:
    fullnameOverride: zookeeper
    replicaCount: 1
